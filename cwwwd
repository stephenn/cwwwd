#!/usr/bin/env python
r"""
cwwwd -- a handy web server
============================
 
About
-----

cwwwd starts a web server using your current working directory as the
server's default document root and also provides automatic directory
listings.

The application was created to simplify file sharing with network
devices and computers.


Installation
------------

In a terminal, go to the download folder containing cwwwd and type

::

    $ python cwwwd install

Choose an installation directory by number from the provided list or
press return to use the default directory.


Usage
-----

1. In a terminal, go to the folder you want to make available over HTTP
2. Type cwwwd and press return

Example::

    $ cd Movies
    $ cwwwd
    Starting server on port 8080
    ...

Note that cwwwd allows access to localhost *only* by default.  To open
access to all clients, use the ``-a all`` option.

::
    
    $ cwwwd -a all


Options
-------

Server Type (``-s``)
~~~~~~~~~~~~~~~~~~~~
By default, cwwwd uses the Apache2 HTTP server.  If you don't have Apache
installed on your computer, no problem!  cwwwd comes with its own internal
HTTP server.

Use the ``-s`` option with either ``internal`` or ``apache2`` to specify
the server.


Listen Port (``-p``, ``-m``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cwwwd attempts to listen for traffic on the first free port between 8080
and 8179.  To change this range, use the options ``-p``, the start port,
and ``-m``, the maximum number of ports to search.


Access Control (``-a``, ``-d``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
By default only localhost may access server.  Control who is allowed and
denied access to your server by providing comma-separated lists of IPs to
the ``-a`` and ``-d`` options.  Use ``-a all`` to allow access to all
clients.

The denied client list overrides the allowed client list.


Document Root (``-r``)
~~~~~~~~~~~~~~~~~~~~~~
Use the specified document root instead of the default document root, the
current working directory.


Example
~~~~~~~
Start cwwwd using:

1. the internal server, 
2. the first free port between 9001 to 9010,
3. your home directory as the document root,
4. allowing access to everyone with IP address starting with 192.168 or
   the specific IP, 64.202.189.170
5. but denying access to IP addresses 192.168.0.10 and 192.168.0.11

::

    $ cwwwd -s internal                  \
            -p 9001 -m 10                \
            -r ~/                        \
            -a 192.168,64.202.189.170    \
            -d 192.168.0.10,192.168.0.11


Contact
-------

Stephen Norum (stephen@mybunnyhug.org)
"""

from __future__ import division

import cgitb
import cgi

import os
import sys
import optparse
import math
import threading
import subprocess
import textwrap
import tempfile
import signal
import datetime
import shutil
import bz2
import base64

import urllib
import mimetypes
import socket
import BaseHTTPServer

__version__ = '1.0'
__author__ = 'Stephen Norum <stephen@mybunnyhug.org>'

verbose = False
loud = True
doc_root = ''

clients = {'authorized': ['127.0.0.1',],
           'unauthorized': []}


def stop_apache2(temp_dir_path): 
    global verbose
       
    # Stop the daemon
    args = ['httpd',
            '-d', temp_dir_path,
            '-f', 'conf/httpd.conf',
            '-k', 'stop']

    if verbose:
        print ' '.join(args)
            
    print 'Stopping server'
    p = subprocess.Popen(args)
    p.wait()


def start_apache2(port):
    global doc_root, clients, verbose
    
    # Create temp dir for apache2 files
    temp_dir_path = tempfile.mkdtemp(prefix='cwwwd_apache2_')

    if verbose:
        print 'Created temp directory:', temp_dir_path
    
    for sub_dir in ('__cwwwd__', 'conf', '__cwwwd_cgi__'):
        os.mkdir(os.path.join(temp_dir_path, sub_dir))
            
    # Configure custom config file
    if clients['authorized']:
        clients['authorized'].insert(0, '')
        allow_from = '\n    Allow from '.join(clients['authorized'])
    else:
        allow_from = '\n'
    
    if clients['unauthorized']:
        clients['unauthorized'].insert(0, '')
        deny_from = '\n    Deny from '.join(clients['unauthorized'])
    else:
        deny_from = '\n'

    apache2_files = ServerConfig.apache2()
    apache2_files['conf/custom.conf'] = apache2_files['conf/custom.conf'].format(
        port=port,
        doc_root=escape_path(doc_root),
        temp_dir=escape_path(temp_dir_path),
        allow_from=allow_from,
        deny_from=deny_from
    )
    
    apache2_files['conf/httpd.conf']  = apache2_files['conf/httpd.conf'].format(
        libexec_path = apache2_libexec_path()
    )
    
    # Write the apache2 files
    for file_name, contents in apache2_files.iteritems():
        f_path = os.path.join(temp_dir_path, file_name)
        with open(f_path, 'w') as f:
            f.write(contents)
    
    # Copy this file to temp/cgi/cwwwd.py
    cgi_cwwwd_path = os.path.join(temp_dir_path, '__cwwwd_cgi__', 'cwwwd.py')
    shutil.copyfile(__file__, cgi_cwwwd_path)
    os.chmod(cgi_cwwwd_path, 0555)
        
    # Build arg list
    args = [
        'httpd',
        '-d', temp_dir_path,
        '-f', 'conf/httpd.conf',
        '-k', 'start',
        '-C', 'Include "{0}"'.format(escape_path(os.path.join(temp_dir_path, 'conf/custom.conf')))
    ]
    
    if verbose:
        print 'httpd command: ', ' '.join(args)
        
    try:
        p = subprocess.Popen(args)

        print_server_info(port)

        p.wait()
        response = raw_input('\n-- Press Enter To Stop Server --\n')
    except OSError as e:
        print e
        print 'Try using internal server instead.  "cwwwd -s internal"'
    except KeyboardInterrupt:
        pass
    finally:
        # Stop the server
        stop_apache2(temp_dir_path)
        
        # Remove temporary directory
        try:
            shutil.rmtree(temp_dir_path)
        except OSError as e:
            pass
    
        print 'Finished'


def request_authorization(client_ip, default='n'):
    global loud
    msg = ('===================================================\n'
           'Warning: {0} is unauthorized.\n'
           '         Authorize access for this client (y/N)? ')
    
    if loud:
        print '\a'

    try:
        response = raw_input(msg.format(client_ip))
    except KeyboardInterrupt:
        response = default
    if not response:
        response = default
    return (response.lower()[0] == 'y')


# From http://code.activestate.com/recipes/473878/
def timeout(func, args=(), kwargs={}, timeout_duration=1, default=None):
    class InterruptableThread(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)
            self.result = None

        def run(self):
            try:
                self.result = func(*args, **kwargs)
            except:
                self.result = default
    it = InterruptableThread()
    it.start()
    it.join(timeout_duration)
    if it.isAlive():
        return default
    else:
        return it.result
        

def next_open_port(start_port=8080, max_port=100):
    for port in xrange(start_port, max_port + 1):
        s = socket.socket()
        try:
            s.bind(('localhost', port))
        except socket.error:
            continue
        finally:
            s.close()
        return port
    return None


class HttpRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(self):
        if self.handle_request():
            self.send_file = True
            self.serve_request()
        else:
            self.send_error(401)
    
    def do_HEAD(self):
        if self.handle_request():
            self.send_file = False
            self.serve_request()
        else:
            self.send_error(401)
    
    def handle_request(self):
        global doc_root, clients
        (self.parsed_path, self.parsed_query) = parse_request_uri(self.path)
        self.doc_path = os.path.abspath(os.path.join(doc_root, self.parsed_path))
        client_str = '{0[0]}:{0[1]}'.format(self.client_address)

        log_fmt = ('Client: "%s", '
                   'Request for: "%s", '
                   'Parsed path: "%s", '
                   'Serving: "%s"')
        self.log_message(log_fmt, client_str, self.path, self.parsed_path, self.doc_path)
        
        client_ip = str(self.client_address[0])
        
        client_in_allowed_list = (
            'all' in clients['authorized'] or
            True in (client_ip.startswith(ip) for ip in clients['authorized'])
        )
        
        client_in_denied_list = (
            client_ip in clients['unauthorized'] or 
            'all' in clients['unauthorized']
        )
        
        if client_in_denied_list:
            return False
        elif not client_in_allowed_list:
            allow = timeout(request_authorization, (client_ip,), timeout_duration=5, default=False)
            if allow:
                clients['authorized'].append(client_ip)
            else:
                clients['unauthorized'].append(client_ip)
                return False
        
        if os.path.commonprefix((doc_root, self.doc_path)) != doc_root:
            return False
        
        return True
    
    def serve_request(self):    
        if self.parsed_path == 'favicon.ico':
            self.serve_favicon()
            return

        if not os.path.exists(self.doc_path):
            error_msg = 'File not found: {0}'.format(self.path)
            self.send_error(404, error_msg)
            return
        
        if os.path.isfile(self.doc_path):
            self.serve_file(self.parsed_path, self.doc_path)
            return
        
        if os.path.isdir(self.doc_path):
            self.serve_dir_index(self.parsed_path, self.doc_path)
            return
    
    def serve_favicon(self):
        self.send_response(200)
        self.send_header('Content-Type', 'image/x-icon')
        self.end_headers()
        if self.send_file:
            self.wfile.write(ServerConfig.favicon())
    
    def serve_file(self, path, local_path):
        (mime_type, encoding) = mimetypes.guess_type(local_path)
        file_size = os.path.getsize(local_path)
        self.log_message('Content-Type: {0}'.format(mime_type))
        self.log_message('Content-Encoding: {0}'.format(encoding))
        self.log_message('Content-Length: {0}'.format(file_size))

        self.send_response(200)
        self.send_header('Content-Type', mime_type if mime_type else ServerConfig.default_mime_type())
        self.send_header('Content-Length', file_size)
        if encoding:
            self.send_header('Content-Encoding', encoding)
        self.end_headers()

        if self.send_file:
            try:
                with open(local_path) as f:
                    self.wfile.write(f.read())
            except IOError:
                pass
    
    def serve_dir_index(self, path, local_path):
        self.send_response(200)
        self.send_header('Content-Type', 'text/html')
        self.end_headers()
        
        if not self.send_file:
            return
        
        self.wfile.write(directory_listing(path, local_path))


def server_urls(port):
    hostname = socket.gethostname()
    (name, aliaslist, addresslist) = socket.gethostbyname_ex(hostname)
    
    addr_format = 'http://{{0}}:{0}'.format(port)
    
    urls = []
    
    if name:
        urls.append(addr_format.format(name))

    if aliaslist:
        aliaslist.sort()
        urls.extend((addr_format.format(alias) for alias in aliaslist))

    if addresslist:
        addresslist.sort(cmp=lambda x,y: cmp(x.split('.'), y.split('.')))
        urls.extend((addr_format.format(addr) for addr in addresslist))
    
    return urls


def apache2_libexec_path():
    default_path = '/usr/libexec/apache2'
    libexec_path = ''
    command = ('apxs', '-q', 'LIBEXECDIR')
    try:
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (libexec_path, stderr) = p.communicate()
        libexec_path = libexec_path.strip('\n')
    except OSError:
        pass
    
    if not libexec_path:
        libexec_path = default_path
        
    return libexec_path

def print_server_info(port):
    print 'Starting server on port', port
    print
    print 'Server addresses:'
    print
    
    for url in server_urls(port):
        print '   ', url
    

def append_ips(dest, *new_ips):
    for ip in new_ips:
        if ip:
            dest.append(ip)


def escape_path(path):
    path = path.replace('\\', '\\\\')
    path = path.replace('"', '\\"')
    return path


def si_prefix(value):
    value = float(value)
    abs_val = math.fabs(value)
    prefixes = ['y', 'z', 'a', 'f', 'p', 'n', '&micro;', 'm', # 0-7
                '',                                           # 8
                'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']       # 9-16
    if value:            
        power = math.log(abs_val, 10)
        si_power = (power // 3) * 3
        if si_power > 24:
            si_power = 24
        elif si_power < -24:
            si_power = -24
        value = value / (10 ** si_power)
        prefix = prefixes[int(si_power // 3) + 8]
    else:
        prefix = prefixes[8]
    
    return (value, prefix)
def parse_request_uri(req_uri):
    (path, sep, query) = req_uri.partition('?')
    path = urllib.url2pathname(path).strip('/')

    return (path, query)

def validate_ip(ip):
    if ip == 'all':
        return ip

    try:
        parts = ip.split('.')
        if not parts or len(parts) > 4:
            raise Exception
        try:
            int_parts = (int(p) for p in parts)
            int_parts = [p for p in int_parts if p >= 0 and p < 256]
        except ValueError:
            raise Exception
        
        if len(int_parts) != len(parts):
            raise Exception
    except Exception:
        raise ValueError('Error: invalid IP "{0}"'.format(ip))
        
    
    return ip    

# From http://wiki.python.org/moin/EscapingHtml
def html_escape(text):
    html_escape_table = {
        "&": "&amp;",
        '"': "&quot;",
        "'": "&apos;",
        ">": "&gt;",
        "<": "&lt;",
    }
    return ''.join(html_escape_table.get(c,c) for c in text)


def directory_listing(path, local_path):
    # Gather directory information
    file_names = (p for p in os.listdir(local_path) if not p.startswith('.'))
    dir_contents = []
    for file_name in file_names:
        file_info = {}
        file_path = os.path.join(local_path, file_name)
        
        # Make title
        file_info['text'] = html_escape(file_name)
        file_info['title'] = file_info['text'].replace('"', '&quot;')
        
        # Make link
        file_info['uri'] = '/'.join((path, file_name)).strip('/')
        file_info['uri'] = urllib.quote(file_info['uri'])

        # Get modification timestamp
        file_info['last_mod_ts'] = os.path.getmtime(file_path)
        d = datetime.datetime.fromtimestamp(file_info['last_mod_ts'])
        file_info['last_mod_str'] = d.strftime('%Y-%m-%d %H:%M')
        
        # Get size and type
        if os.path.isdir(file_path):
            file_info['is_dir']   = True
            file_info['size']     = 0
            file_info['size_str'] = ('&ndash;', '')
            file_info['type']     = 'directory'
            file_info['uri']     += '/'
            file_info['title']   += '/'
        else:
            file_info['is_dir']   = False
            file_info['size']     = os.path.getsize(file_path)
            si                    = list(si_prefix(file_info['size']))
            file_info['size_str'] = ('{0:.1f}'.format(si[0]), si[1] + 'B')
            file_info['type']     = mimetypes.guess_type(file_path)[0]
            if not file_info['type']:
                file_info['type'] = ServerConfig.default_mime_type()

        dir_contents.append(file_info)
    
    # Generate HTML
    output = []
    title = 'Index of /{0}'.format(html_escape(path))
    
    output.append(textwrap.dedent(
        """
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

        <head>
        """)[1:]
    )
    output.append('<title>{title}</title>'.format(title=title))
    output.append(ServerConfig.style())
    output.append('<div id="header"><h1>{0}</h1></div>\n'.format(title))
    output.append('<div id="listdir">\n')
    
    if dir_contents:
        output.append('<table cellpadding=0 cellspacing=0 width="100%">\n')
        output.append('    <tr id="headerrow">'
                      '<th class="col_name">Name</th>'
                      '<th class="col_lmod">Last Modified</th>'
                      '<th class="col_fshd" colspan="2">Size</th>'
                      '<th class="col_type">Type</th>'
                      '</tr>\n')
        case_insensitive_compare = lambda x,y: cmp(x['title'].lower(), y['title'].lower())
        for item in sorted(dir_contents, cmp=case_insensitive_compare):                
            output.append('    <tr>')
            output.append('<td class="col_name"><a href="/{0[uri]}" title="{0[title]}">{0[title]}</a></td>'.format(item))
            output.append('<td class="col_lmod">{0[last_mod_str]}</td>'.format(item))
            output.append('<td class="col_fsvl" >{0[0]}</td>'
                          '<td class="col_fsut">&nbsp;{0[1]}</td>'.format(item['size_str']))
            output.append('<td class="col_type">{0[type]}</td>'.format(item))
            output.append('</tr>\n')
        output.append('</table>\n')
    else:
        output.append('<div id="empty">Empty</div>\n')
    
    if path:
        output.append('<div id="up_link">')
        output.append('<a href="/{0}/..">Parent Directory</a>\n'.format(urllib.quote(path)))
        output.append('</div>')
        
    output.append('</div>\n')
    output.append('<div id="footer">\n')
    output.append('&nbsp;</div>\n')        
    output.append(textwrap.dedent("""
    </body>
    </html>
    """))
    
    return ''.join(output)


def apache2_directory_listing():
    print "Content-type: text/html"
    print        
    doc_root = os.environ['DOCUMENT_ROOT']
    (path, query) = parse_request_uri(os.environ['REQUEST_URI'])
    local_path = os.path.join(doc_root, path)
    print directory_listing(path, local_path)
    

def install():
    '''
    Copy self to a directory in the user's $PATH
    '''
    default_path = '/usr/local/bin'
    
    paths = os.environ['PATH'].split(':')
    paths = [p for p in set(paths) if os.path.isdir(p)]    
    paths.sort(cmp=lambda x,y: cmp(x.lower(), y.lower()))
    
    if not paths:
        print 'Error: empty search path.'
        print 'Installation cancelled.'
        return 1
    
    if default_path not in paths:
        default_path = paths[0]
    
    default_index = paths.index(default_path) + 1
    default_str = ' (default: {0}, {1})'.format(default_index, default_path)
    
    print
    title = 'Installation Directories'
    print title
    print '-' * len(title)
    print
    for i, p in enumerate(paths):
        print '{0:4}) {1}'.format(i + 1, p)
    print
    
    print 'Default: {0} ({1})'.format(default_index, default_path)
    try:
        inp = raw_input('Choose directory by number or press return for default: ')
    except KeyboardInterrupt:
        print '\nInstallation cancelled.'
        return 0
    print

    if inp:
        try:
            index = int(inp) - 1
            dst_dir = paths[index]
        except (ValueError, IndexError) as e:
            print 'Error: Invalid choice'
            print 'Installation cancelled.'
            return 1
    else:
        dst_dir = default_path
        
    dst = os.path.join(dst_dir, 'cwwwd')
    src = __file__
    
    if os.path.exists(dst):
        print 'Warning:', dst, 'already exists.'
        
        try:
            inp = raw_input('Overwrite file [y/N]? ')
        except KeyboardInterrupt:
            inp = ''
            
        try:
            if not inp[0].lower() == 'y':
                raise IndexError
        except IndexError:
            print '\nInstallation cancelled.'
            return 0
        print

    try:
        print 'Installing cwwwd as', dst
        shutil.copyfile(src, dst)
        print 'Making cwwwd executable'
        os.chmod(dst, 0755)
    except shutil.Error:
        pass
    except (IOError, OSError) as e:
        print 'Error: cannot write to', dst
        print
        print 'Try "sudo python cwwwd install"'
        return 1
    
    print 'Done!'
    print
    print 'You can now run cwwwd from any directory by typing cwwwd'
    
    return 0


def process_options(argv=None):
    usage = '%prog [install | help] [options]'
    version = '%prog {version}'.format(version=__version__)

    parser = optparse.OptionParser(usage=usage, version=version)

    parser.add_option('-v', default=False,
                      action='store_true', dest='verbose',
                      help='produce verbose output')
    parser.add_option('-q', default=False,
                      action='store_true', dest='quiet',
                      help='suppress system beep')
    default=8080
    parser.add_option('-p', default=default,
                      action='store', type='int', dest='start_port', metavar='PORT',
                      help='search for free port starting at PORT (default: {0})'.format(default))
    default=100
    parser.add_option('-m', default=default,
                      action='store', type='int', dest='max_port', metavar='MAX',
                      help='search MAX number of ports for a free port (default: {0})'.format(default))
    parser.add_option('-a', default='',
                      action='store', type='string', dest='allow', metavar='HOSTS',
                      help='allow server access to comma-separated HOSTS'.format(default))
    parser.add_option('-d', default='',
                      action='store', type='string', dest='deny', metavar='HOSTS',
                      help='deny server access to comma-separated HOSTS'.format(default))
    parser.add_option('-r',
                      action='store', type='string', dest='doc_root', metavar='DIR',
                      help='use DIR for document root instead of cwd')
    default='apache2'
    parser.add_option('-s', default=default,
                      choices=['internal', 'apache2'],
                      action='store', dest='server', metavar='SRVR',
                      help='server "internal" or "apache2" (default: {0})'.format(default))
    
    if argv is None:
        argv = sys.argv[1:]

    (options, args) = parser.parse_args(argv)

    if not options.doc_root:
        options.doc_root = os.curdir
  
    return (options, args)


def main(argv=None):
    global doc_root, loud, verbose
    
    # Print the directory listing if this is called as cgi
    if os.environ.get('REQUEST_URI'):
        cgitb.enable()
        apache2_directory_listing()
        return 0
        
    (options, args) = process_options()
    
    try:
        if args[0] == 'install':
            return install()
    except IndexError:
        pass
    
    try:
        if args[0] == 'help':
            print __doc__
            return 0
    except IndexError:
        pass
    
    verbose = options.verbose
    loud = not options.quiet
    doc_root = os.path.abspath(options.doc_root)
    port = next_open_port(options.start_port, options.start_port + options.max_port)
    
    if not port:
        sys.stderr.write('Error: no open ports in range '
                         '{0} to {1}.\n'.format(options.start_port, options.start_port + options.max_port))
        return 1
    
    try:
        allow_ips = [validate_ip(ip) for ip in options.allow.split(',') if ip]
        deny_ips = [validate_ip(ip) for ip in options.deny.split(',') if ip]
    except ValueError as e:
        print e
        return 1
    
    append_ips(clients['authorized'], *allow_ips)
    append_ips(clients['unauthorized'], *deny_ips)
    
    if options.server == 'internal':
        print_server_info(port)
        print
        print '-- Type Control-C To Stop Server --'
        try:
            server = BaseHTTPServer.HTTPServer(('', port), HttpRequestHandler)
            server.serve_forever()
        except KeyboardInterrupt:
            pass
        finally:
            server.socket.close()
            return 0
    elif options.server == 'apache2':
        start_apache2(port)
        return 0
    
    print 'Error: Invalid server type.  Server not started.'
    return 1


##########################################################################################
##########################################################################################
##
##  Server Configuration
##
##########################################################################################
##########################################################################################


class ServerConfig(object):
    _favicon = None
    _apache2 = None
    _style   = None
    
    @classmethod
    def default_mime_type(cls):
        return 'application/octet-stream'
    
    @classmethod
    def style(cls):
        if ServerConfig._style:
            return ServerConfig._style
        
        ServerConfig._style = textwrap.dedent(
        '''
        <style>
        body {
            margin: 0;
            padding: 0;
            background: #fff;
            color: #555;
        }
        body, tr, th {
            font: 16px Helvetica;
        }
        a {
            text-decoration: none;
            color: #555;
        }
        a:visited {
            color: #bbb;
        }
        a:hover {
            text-decoration: underline;
            color: #f20;
        }
        h1 {
            position: relative;
            margin: 0;
            padding: 0.5em 0 0.5em 100px;
            color: #c5c5c5;
            background: #eee;
        }
        #header {
            width: 100%;
            overflow: hidden;
            position: relative;
        }
        td, th, #empty {
            padding: 3px 0;
        }
        td, th {
            text-align: center;
        }
        .col_type {
            text-align:left;
            width:17em;
        }
        .col_name {
            padding-left: 100px;
            text-align: left;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }
        .col_lmod {
            width: 10em;
            overflow: hidden;
            white-space: nowrap;
        }
        .col_fshd {
            width:11em;
        }
        .col_fsvl {
            padding-right:0;
            text-align:right;
        }
        .col_fsut {
            padding-left:0;
            text-align:left;
        }
        #empty, th {
            font-weight: bold;
            color:#666;
            background:#ddd;
        }
        table {
            margin:0;
            border-collapse: collapse;
            table-layout:fixed;
        }
        tr#headerrow {
        }
        .center_header {
            text-align:center;
        }
        #listdir {
            margin:0;
            padding: 0 0 10px 0;
        }
        #footer {
            color: #bbb;
            padding:0;         
            margin:10px 0;
        }
        #footer a {
            color:#bbb;
        }
        #empty {
            padding-left: 100px;
        }
        #up_link {
            margin-top: 1em;
            padding-left: 100px;
        }
        tr:hover {
            background:#eee;
        }
        </style>
        </head>
        <body>
        ''')
        return ServerConfig._style
    
    @classmethod
    def favicon(cls):
        if ServerConfig._favicon:
            return ServerConfig._favicon

        favicon_bz2_b64 = '''
        QlpoOTFBWSZTWTrmtEUAAEb/WP/wVWBBQABAQAIBAABAQAEAQAABAAiwAOygSmSK
        NNHigHqADGAAAAAEmlKm9SYBBtENPRjUJMRixSKRBqPEEl+V5san3Ri0tWW1Qz7Z
        645YJqcO+wOKskmjA53TGWQ1ZyGIyHZkulb9mAk0EOyAD8lCbWQoyZQiMEgYRMID
        mhqEtux56DrnsMvncP1Su/jOGbkPxM89qGOMCESgUlK0ZKMiJL5aHn/wTE1tiDP1
        KDERIozww1TCbrawO4InU9C7kinChIHXNaIo
        '''
        
        ServerConfig._favicon = bz2.decompress(base64.b64decode(favicon_bz2_b64))   
        return ServerConfig._favicon
    
    @classmethod
    def apache2(cls):
        if ServerConfig._apache2:
            return ServerConfig._apache2
    
        apache2_files = {}    
        apache2_files['conf/httpd.conf'] = r'''
            LockFile accept.lock
            PidFile httpd.pid
            ErrorLog error.log
            
            LoadModule authn_file_module {libexec_path}/mod_authn_file.so
            LoadModule authn_dbm_module {libexec_path}/mod_authn_dbm.so
            LoadModule authn_anon_module {libexec_path}/mod_authn_anon.so
            LoadModule authn_dbd_module {libexec_path}/mod_authn_dbd.so
            LoadModule authn_default_module {libexec_path}/mod_authn_default.so
            LoadModule authz_host_module {libexec_path}/mod_authz_host.so
            LoadModule authz_groupfile_module {libexec_path}/mod_authz_groupfile.so
            LoadModule authz_user_module {libexec_path}/mod_authz_user.so
            LoadModule authz_dbm_module {libexec_path}/mod_authz_dbm.so
            LoadModule authz_owner_module {libexec_path}/mod_authz_owner.so
            LoadModule authz_default_module {libexec_path}/mod_authz_default.so
            LoadModule auth_basic_module {libexec_path}/mod_auth_basic.so
            LoadModule auth_digest_module {libexec_path}/mod_auth_digest.so
            LoadModule cache_module {libexec_path}/mod_cache.so
            LoadModule disk_cache_module {libexec_path}/mod_disk_cache.so
            LoadModule mem_cache_module {libexec_path}/mod_mem_cache.so
            LoadModule dbd_module {libexec_path}/mod_dbd.so
            LoadModule dumpio_module {libexec_path}/mod_dumpio.so
            LoadModule ext_filter_module {libexec_path}/mod_ext_filter.so
            LoadModule include_module {libexec_path}/mod_include.so
            LoadModule filter_module {libexec_path}/mod_filter.so
            LoadModule substitute_module {libexec_path}/mod_substitute.so
            LoadModule deflate_module {libexec_path}/mod_deflate.so
            LoadModule log_config_module {libexec_path}/mod_log_config.so
            LoadModule log_forensic_module {libexec_path}/mod_log_forensic.so
            LoadModule logio_module {libexec_path}/mod_logio.so
            LoadModule env_module {libexec_path}/mod_env.so
            LoadModule mime_magic_module {libexec_path}/mod_mime_magic.so
            LoadModule cern_meta_module {libexec_path}/mod_cern_meta.so
            LoadModule expires_module {libexec_path}/mod_expires.so
            LoadModule headers_module {libexec_path}/mod_headers.so
            LoadModule ident_module {libexec_path}/mod_ident.so
            LoadModule mime_module {libexec_path}/mod_mime.so
            LoadModule autoindex_module {libexec_path}/mod_autoindex.so
            LoadModule asis_module {libexec_path}/mod_asis.so
            LoadModule info_module {libexec_path}/mod_info.so
            LoadModule cgi_module {libexec_path}/mod_cgi.so
            LoadModule dir_module {libexec_path}/mod_dir.so
            LoadModule actions_module {libexec_path}/mod_actions.so
            LoadModule alias_module {libexec_path}/mod_alias.so
            
            #LoadModule python_module {libexec_path}/mod_python.so
            #LoadModule php5_module {libexec_path}/libphp5.so
            
            <IfModule !mpm_netware_module>
            <IfModule !mpm_winnt_module>
            #
            # If you wish httpd to run as a different user or group, you must run
            # httpd as root initially and it will switch.  
            #
            # User/Group: The name (or #number) of the user/group to run httpd as.
            # It is usually good practice to create a dedicated user and group for
            # running httpd, as with most system services.
            #
            User _www
            Group _www
            
            </IfModule>
            </IfModule>
            
            <Directory />
                Options FollowSymLinks
                AllowOverride None
                Order deny,allow
                Deny from all
            </Directory>
            
            <IfModule log_config_module>
                LogFormat "%h %l %u %t \"%r\" %>s %b" common
                CustomLog access.log common
            </IfModule>
            
            DefaultType application/octet-stream
            <IfModule mime_module>
                #
                # TypesConfig points to the file containing the list of mappings from
                # filename extension to MIME-type.
                #
                TypesConfig /private/etc/apache2/mime.types
            
                #
                # AddType allows you to add to or override the MIME configuration
                # file specified in TypesConfig for specific file types.
                #
                #AddType application/x-gzip .tgz
                #
                # AddEncoding allows you to have certain browsers uncompress
                # information on the fly. Note: Not all browsers support this.
                #
                #AddEncoding x-compress .Z
                #AddEncoding x-gzip .gz .tgz
                #
                # If the AddEncoding directives above are commented-out, then you
                # probably should define those extensions to indicate media types:
                #
                AddType application/x-compress .Z
                AddType application/x-gzip .gz .tgz
            </IfModule>
            
        '''
        
        apache2_files['conf/custom.conf'] = r'''
            Listen {port}
            DocumentRoot "{doc_root}"
            Alias /__cwwwd__      "{temp_dir}/__cwwwd__"
            Alias /favicon.ico    "{temp_dir}/__cwwwd__/favicon.ico"
            Alias /__cwwwd_cgi__  "{temp_dir}/__cwwwd_cgi__"
            
            <Directory "{doc_root}">
                Options FollowSymLinks MultiViews
                AllowOverride All
                Order allow,deny
                {allow_from}
                {deny_from}
                
                DirectoryIndex /__cwwwd_cgi__/cwwwd.py    
            </Directory>
            
            <Directory "{temp_dir}">
                Order allow,deny
                Deny from all
            </Directory>
            
            <Directory "{temp_dir}/__cwwwd__">
                Order deny,allow
                Allow from all
            </Directory>
            
            <Directory "{temp_dir}/__cwwwd_cgi__">
                Options FollowSymLinks ExecCGI
                Order deny,allow
                Allow from all
                AddHandler cgi-script .py
            </Directory>
        '''
        
        for k, s in apache2_files.iteritems():
            apache2_files[k] = textwrap.dedent(s)        
    
        apache2_files['__cwwwd__/favicon.ico'] = ServerConfig.favicon()
        ServerConfig._apache2 = apache2_files
        return ServerConfig._apache2
        
    
if __name__ == '__main__':
    status = main()
    sys.exit(status)

